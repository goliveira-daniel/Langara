service: wmdd4999-smallProject

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    AUDIO_DYNAMODB_TABLE: audio-${self:service}-${opt:stage, self:provider.stage}
    PLAYLIST_DYNAMODB_TABLE: playlist-${self:service}-${opt:stage, self:provider.stage}
    S3_BUCKET: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.AUDIO_DYNAMODB_TABLE}"

# custom:
#   bucket: wmdd4999-smallProject

functions:
  scan:
    handler: functions/scan.scan
    description: Adds audio files data created on S3 to dynamodb table
    environment: 
      AUDIO_DYNAMODB_TABLE: ${self:provider.environment.AUDIO_DYNAMODB_TABLE}
    events:
      - s3:
          bucket: ${self:service}
          event: s3:ObjectCreated:*
          rules:
            - suffix: 
              - .png
              - .mp3
              - .ogg
              - .wma
              - .flac
  
  get:
    handler: functions/get.get
    description: Search for a song
    environment: 
      AUDIO_DYNAMODB_TABLE: ${self:provider.environment.AUDIO_DYNAMODB_TABLE}
    events:
      - http:
          path: functions/{id}
          method: get
          cors: true

  list:
    handler: functions/list.list
    description: Lists all songs
    environment: 
      AUDIO_DYNAMODB_TABLE: ${self:provider.environment.AUDIO_DYNAMODB_TABLE}
    events:
      - http:
          path: functions
          method: get
          cors: true
        
  create:
    handler: functions/create.create
    description: Creates a new playlist
    environment: 
      PLAYLIST_DYNAMODB_TABLE: ${self:provider.environment.PLAYLIST_DYNAMODB_TABLE}
      AUDIO_DYNAMODB_TABLE: ${self:provider.environment.AUDIO_DYNAMODB_TABLE}
    events:
      - http:
          path: functions
          method: post
          cors: true

resources:
  Resources:
    AudioDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.AUDIO_DYNAMODB_TABLE}

    PlaylistDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PLAYLIST_DYNAMODB_TABLE}
        
    AudioS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        # add additional custom bucket configuration here
    ScanLambdaPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - ScanLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}"